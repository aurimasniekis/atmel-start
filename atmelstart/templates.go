// Code generated by "esc -o templates.go -pkg atmelstart templates"; DO NOT EDIT.

package atmelstart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/CMakeLists.txt": {
		name:    "CMakeLists.txt",
		local:   "templates/CMakeLists.txt",
		size:    2553,
		modtime: 1624144184,
		compressed: `
H4sIAAAAAAAC/7xW32/jNgx+z19BtAEufbAPw70VvQKu47Ze8wuOu/WeBFlmEq225Ely18Dw/z5IdrI0
7a3FdriXwCD5kR8/k3RYSR+RlFzwsi6Jwj9rrjAf/RYly3g+gy/+L1/OBlywos6RrGuq8tHZYHAKgSmx
gKWhyoCS0kDOFTIj1dYfaDSjIJ1GE7JMgyQl4ziBYRNOg7uIhPdJEs1SMomXztFCGIS3ESyC9BZOFtRs
wEjwqdE29Qlcz5MwelWRyRyBatCGGs6g4JmiajugeU7651GfAZZpkMbhAADgFJayVgxhxQvUgM9GUWYw
h5WSJXxaM/Z5Sh/Rej/5DtE0Higq1gh+B722yLZ1zpNhc9Rl+7lp/LY92WNR5G07cPTjTsO9Tvx9Boaq
NRqyU/8Aue9ucX816bs74NrXGnP137heUYXQzwQwWVa8QAWyMlwKvaPV20lvfoOSV5pNXWbdI6vqr03j
h4v7jpI3JqRp/DE+cYZtS8gbpQsuHl8XttYfXDWoqmILZoOQ44rWhYFVQdcazIYaqDXmdigzBC5ckJGy
YBvKhe/Wx80TVAqfuKx1sR2cQrYFRouCizWYDddQUqbkwP3uKJNaI+nLEVfuzDL8sLq2m9WqFswGeBpZ
J9LOk1NDX1nLQoq1Z5ntTMOL4UU4ny7iSUQmwezmPriJzsOHh8tzbyWkZzYKaa7pCr1u1/Tlx4DKGP7B
UHxm2HXpAIcqvPOqAWASz+6i5NzznM9bK1lXu26L8jgIRf4yxNMVMv1VUCF993iMWLNjEU+89O1lmrhp
XTLFK7NbrHfW0maL/301D5ezh7wNcJexruyF6rFnAxR5N3Nuym/pE0JoDwysUaCiBoEKkNkfyEw3xLI2
IFewlbWCaHLtjN8bZ6Aih4pq3ZkRBC1xj+7e4NHIM4XUIMnsHjm/e9n2bLNaG1nasS+pyEd9q2mQ3EQp
DJsuuoXFfJmSq/t4Mu4jwvl0GszG++/L/OrXcL741oI3h4wLqrYwvOjSkOt4Ep3vc12+dJCrYBmRWTA9
DPEzLvpCv8+Tu3h2Y+WOwnSefDuCj+PkAPhh+eE2eviZ0m/w+WdIz22d/yP8Bp9/mPBTJ9kjVgZWUkFG
2eNfVOXafdqo4RkvuNke6WWVwWdktaFZgbuDZHV2wsF3r/io97/Aj3YMXYYWhk2Q3MzaLvTw2HV/X+wn
/gjR13tZ/J99Ogo/kODths7+DgAA//8nILDg+QkAAA==
`,
	},

	"/templates/toolchain.cmake": {
		name:    "toolchain.cmake",
		local:   "templates/toolchain.cmake",
		size:    4099,
		modtime: 1624081462,
		compressed: `
H4sIAAAAAAAC/7RWXW+jShJ9968okZHWVgZbmkj7MNI+YGg7reHD2+AJ2RfUgQa3Bhov4My1Rv7vV40N
Bpskk3tz85IIqk6dOlWnSJjRHyzIuODZLgsK9v8dL1g0/o6Iix0b7qb/noxGN+DleRpuKBcQ85RBlUOY
i5gnu4JBtWGw1HXQiAVhnm15yorRDaj/wM/oBrAot5IiPO3ryra/Aktf+9uClWUOVY/o59EN0BJ+sjSV
v2V8LhjERZ7Bpqq25dfZLOHVZvc0DfNs9rxlVcGTfEaLTK2VUVu8clQXh7yIWCEF2JUMKJRbFvKYh/DM
ipLnAvK4FaOg1UbGbqhoS+fHP1ead/8Z9vludAMhFbCl5ZEeF2VF05RWEmtLq40spVv0B4NdyUUCquE5
jqnfa9gODEz+k+1n4a6s8mwmo0ejklXjc4RH8MpEHsiGRC6YyugTn4x4PH7A9t2XyQgAoJ+CfA+m7A82
GbG0ZOMXQiYjJiIej+vtMFjFiowLBj1uMG4aaBTpdidZwNh2PDDQAtvI6CfXdW8AxxeYvASaFoxGe0kK
+FHPkIZS4AKeOT0+yLOMighSLthniHIQeQVVsZdsopYur/5VQpqHNSFZMOYiCrZFnhQ0Gy91PdCIFeiO
tcImIsEc2/Dp15W6BzUJQyDov2tMkFETb1obgjgqCpCxsqQJGy80TzMDRIhDQFkL+nQ0mKQyWC0Jwyms
UkZLduHCvlLPtOA1WEbFjqbpfqrUpdvB1QIvZJlGAvi5YQXrb0vdHC+b2bFI5iWsCqTBBM1YIE2fCya6
K2JgEnjIWsGnX0MaHIAgzZQumLwX7vrhAQxMkO455PEj0GbTKWhz1zHXHmqHiXzseu5wQjPQvknkCIbZ
6pp+j+oTAMrl4bw+AMrlvrie5q1dUNb1PWgA5E37elnwcJr42cgvrN2C8pRFfXM0yM1yvIh+2icA2Amp
gRy2TK777DwfGMAppIF49SKAQ0C+HB7FcQqDzV02Ut+C1jkRhHlRsLBK94Mddu6c3rrteJEbh5X11dUt
7RsK3EfXQ1ZgaxaCJROs4OHk+vWKODpyXYdIYt33yEf62tPmJgrc9WKB/UCHKUvjN2J8/yrKI4+N5QJP
I0vkBd7jCoFcH6wHJp4TTRqmx404jnclwuzTrwbgdIK6WQtsG4HMC+RGB5ZjINnekmgW2Og7Im8Fn5iA
Y5uPb8ViWzfXBvqt2JWmf9OWTWxvfI3byovP5XzYt4fZExev21YGnNx6ZqW3N6+HOO/oOvgt6T5Hfl9u
zbW6qJeFDkcTtR4ZeH+6VM2bhakt3cBA8/UywDb2QFGTO1CdBNQk+kmLGNQHmqagbllERcVDUI06WnkN
CpRz7csKB+WkpesRbC9BUWDhEB29gEeQiTQXNeScuyMh5fXwawJdnHdSsLDt4v8hgsyWRfk6i3PGNZEL
tPfL8YC9ewPNsb1wjnwkoS+gJm8q08k885Ir9SL2b7I7Y/Q3qcnGtoeIrZmgaG7HNnFKkxIM9rRLlO4/
nM0df9CIXVfVYQa9THnD43wnoq9DW9692x0hfP8vOfL29tqRQy7rwF/5zPc/0Gl9sI/wWov4u267TPgY
v7Wo73DcQM6Hea7b5Xtd90Lu3/bday65vX2/Q/4MAAD//+doJxUDEAAA
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/CMakeLists.txt"],
		_escData["/templates/toolchain.cmake"],
	},
}
